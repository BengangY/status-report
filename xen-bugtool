#!/usr/bin/env python

# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Copyright (c) 2005, 2007 XenSource Ltd.


#
# To add new entries to the bugtool, you need to:
#
# Create a new capability.  These declare the new entry to the GUI, including
# the expected size, time to collect, privacy implications, and whether the
# capability should be selected by default.  One capability may refer to
# multiple files, assuming that they can be reasonably grouped together, and
# have the same privacy implications.  You need:
#
#   A new CAP_ constant.
#   A cap() invocation to declare the capability.
#
# You then need to add calls to main() to collect the files.  These will
# typically be calls to the helpers file_output(), tree_output(), cmd_output(),
# or func_output().
#

import getopt
import re
import os
import StringIO
import sys
import tarfile
import time
import commands
from xml.dom.minidom import parse, getDOMImplementation
import zipfile
from subprocess import Popen, PIPE
from select import select
from signal import SIGTERM, SIGUSR1
import md5
import platform
import fcntl

sys.path.append('/usr/lib/python')
sys.path.append('/usr/lib64/python')

import xen.lowlevel.xc

OS_RELEASE = platform.release()

#
# Files & directories
#

BUG_DIR = "/var/opt/xen/bug-report"
GRUB_CONFIG = '/boot/grub/menu.lst'
BOOT_KERNEL = '/boot/vmlinuz-' + OS_RELEASE
BOOT_INITRD = '/boot/initrd-' + OS_RELEASE + '.img'
PROC_PARTITIONS = '/proc/partitions'
FSTAB = '/etc/fstab'
PROC_MOUNTS = '/proc/mounts'
ISCSI_CONF = '/etc/iscsi/iscsid.conf'
ISCSI_INITIATOR = '/etc/iscsi/initiatorname.iscsi'
LVM_CACHE = '/etc/lvm/.cache'
PROC_CPUINFO = '/proc/cpuinfo'
PROC_MEMINFO = '/proc/meminfo'
PROC_IOPORTS = '/proc/ioports'
PROC_INTERRUPTS = '/proc/interrupts'
PROC_SCSI = '/proc/scsi/scsi'
FIRSTBOOT_DIR = '/etc/firstboot.d'
PROC_VERSION = '/proc/version'
PROC_MODULES = '/proc/modules'
PROC_DEVICES = '/proc/devices'
PROC_FILESYSTEMS = '/proc/filesystems'
PROC_CMDLINE = '/proc/cmdline'
PROC_CONFIG = '/proc/config.gz'
PROC_USB_DEV = '/proc/bus/usb/devices'
PROC_XEN_BALLOON = '/proc/xen/balloon'
SYSCONFIG_NETWORK = '/etc/sysconfig/network'
SYSCONFIG_NETWORK_SCRIPTS = '/etc/sysconfig/network-scripts'
IFCFG_RE = re.compile(r'^.*/ifcfg-.*')
RESOLV_CONF = '/etc/resolv.conf'
NSSWITCH_CONF = '/etc/nsswitch.conf'
NTP_CONF = '/etc/ntp.conf'
IPTABLES_CONFIG = '/etc/sysconfig/iptables-config'
HOSTS_ALLOW = '/etc/hosts.allow'
HOSTS_DENY = '/etc/hosts.deny'
DHCP_LEASE_DIR = '/var/lib/dhclient'
DELL_OMSA_LOGS = '/var/log/dell'
VAR_LOG_DIR = '/var/log/'
XENSOURCE_INVENTORY = '/etc/xensource-inventory'
VENDORKERNEL_INVENTORY = '/etc/vendorkernel-inventory'
XAPI_LOCAL_DB = '/var/xapi/local.db'
POOL_CONF = '/etc/xensource/pool.conf'
XAPI_CONF = '/etc/xensource/xapi.conf'
XAPI_SSL_CONF = '/etc/xensource/xapi-ssl.conf'
HOST_CRASHDUMPS_DIR = '/var/crash'
HOST_CRASHDUMP_LOGS_RE = re.compile(r'^.*\.log$')
X11_LOGS_DIR = VAR_LOG_DIR
X11_LOGS_RE = re.compile(r'.*/Xorg\..*$')
XAPI_LOCAL_DB = '/var/xapi/local.db'
XAPI_STATE_DB = '/var/xapi/state.db'
XAPI_STATE_DB_GENERATION = '/var/xapi/state.db.generation'

XENSERVER_LOGS = \
    [ VAR_LOG_DIR + x for x in
      ['xensource.log', 'SMlog'] +
      ['xensource.log.%d' % y for y in range(1,21)] +
      ['xensource.log.%d.gz' % y for y in range(1,21)] +
      ['SMlog.%d' % y for y in range(1,20)] +
      ['SMlog.%d.gz' % y for y in range(1,20)] +
      ['xen/xenstored-trace.log',
       'xen/xen-hotplug.log',
       'xen/domain-builder-ng.log'] +
      [ 'xen/xenstored-access.log.%d' % y for y in range(1,20)] +
      [ 'xen/xenstored-access.log.%d.gz' % y for y in range(1,20)]]
YUM_LOG = '/var/log/yum.log'
YUM_REPOS_DIR = '/etc/yum.repos.d'


#
# External programs
#

ARP = '/sbin/arp'
BRCTL = '/usr/sbin/brctl'
CAT = '/bin/cat'
DF = '/bin/df'
DMESG = '/bin/dmesg'
DMIDECODE = '/usr/sbin/dmidecode'
ETHTOOL = '/sbin/ethtool'
FDISK = '/sbin/fdisk'
HDPARM = '/sbin/hdparm'
IFCONFIG = '/sbin/ifconfig'
IPTABLES = '/sbin/iptables'
ISCSIADM = '/sbin/iscsiadm'
LIST_DOMAINS = '/opt/xensource/bin/list_domains'
LS = '/bin/ls'
LSPCI = '/sbin/lspci'
LVS = '/usr/sbin/lvs'
MD5SUM = '/usr/bin/md5sum'
NETSTAT = '/bin/netstat'
PS = '/bin/ps'
PVS = '/usr/sbin/pvs'
ROUTE = '/sbin/route'
RPM = '/bin/rpm'
SQLITE = '/usr/bin/sqlite3'
SYSCTL = '/sbin/sysctl'
UPTIME = '/usr/bin/uptime'
VGS = '/usr/sbin/vgs'
VGSCAN = '/sbin/vgscan'
XAPI_DB_PROCESS = '/opt/xensource/bin/xapi-db-process'
XENSTORE_LS = '/usr/bin/xenstore-ls'
ZCAT = '/bin/zcat'

#
# PII -- Personally identifiable information.  Of particular concern are
# things that would identify customers, or their network topology.
# Passwords are never to be included in any bug report, regardless of any PII
# declaration.
#
# NO            -- No PII will be in these entries.
# YES           -- PII will likely or certainly be in these entries.
# MAYBE         -- The user may wish to audit these entries for PII.
# IF_CUSTOMIZED -- If the files are unmodified, then they will contain no PII,
# but since we encourage customers to edit these files, PII may have been
# introduced by the customer.  This is used in particular for the networking
# scripts in dom0.
#

PII_NO            = 'no'
PII_YES           = 'yes'
PII_MAYBE         = 'maybe'
PII_IF_CUSTOMIZED = 'if_customized'

KEY      = 0
PII      = 1
MIN_SIZE = 2
MAX_SIZE = 3
MIN_TIME = 4
MAX_TIME = 5
MIME     = 6
CHECKED  = 7

MIME_DATA = 'application/data'
MIME_TEXT = 'text/plain'

INVENTORY_XML_ROOT = "system-status-inventory"
INVENTORY_XML_SUMMARY = 'system-summary'
INVENTORY_XML_ELEMENT = 'inventory-entry'
CAP_XML_ROOT = "system-status-capabilities"
CAP_XML_ELEMENT = 'capability'


CAP_BOOT_LOADER          = 'boot-loader'
CAP_DISK_INFO            = 'disk-info'
CAP_FIRSTBOOT            = 'firstboot'
CAP_HARDWARE_INFO        = 'hardware-info'
CAP_HDPARM_T             = 'hdparm-t'
CAP_HOST_CRASHDUMP_DUMPS = 'host-crashdump-dumps'
CAP_HOST_CRASHDUMP_LOGS  = 'host-crashdump-logs'
CAP_KERNEL_INFO          = 'kernel-info'
CAP_NETWORK_CONFIG       = 'network-config'
CAP_NETWORK_STATUS       = 'network-status'
CAP_OEM                  = 'oem'
CAP_PROCESS_LIST         = 'process-list'
CAP_SYSTEM_LOGS          = 'system-logs'
CAP_TAPDISK_LOGS         = 'tapdisk-logs'
CAP_X11_LOGS             = 'X11'
CAP_XAPI_SUBPROCESS      = 'xapi-subprocess'
CAP_XENSERVER_CONFIG     = 'xenserver-config'
CAP_XENSERVER_DOMAINS    = 'xenserver-domains'
CAP_XENSERVER_DATABASES  = 'xenserver-databases'
CAP_XENSERVER_INSTALL    = 'xenserver-install'
CAP_XENSERVER_LOGS       = 'xenserver-logs'
CAP_XEN_INFO             = 'xen-info'
CAP_YUM                  = 'yum'

KB = 1024
MB = 1024 * 1024

caps = {}


def cap(key, pii=PII_MAYBE, min_size=-1, max_size=-1, min_time=-1,
        max_time=-1, mime=MIME_TEXT, checked=True):
    caps[key] = (key, pii, min_size, max_size, min_time, max_time, mime,
                 checked)


cap(CAP_BOOT_LOADER,         PII_NO,                    max_size=3*KB,
    max_time=5)
cap(CAP_DISK_INFO,           PII_MAYBE,                 max_size=15*KB,
    max_time=20)
cap(CAP_FIRSTBOOT,           PII_YES,   min_size=60*KB, max_size=80*KB)
cap(CAP_HARDWARE_INFO,       PII_MAYBE,                 max_size=18*KB,
    max_time=5)
cap(CAP_HDPARM_T,            PII_NO,    min_size=0,     max_size=KB,
    min_time=20, max_time=60, checked=False)
cap(CAP_HOST_CRASHDUMP_DUMPS,PII_YES, checked = False)
cap(CAP_HOST_CRASHDUMP_LOGS, PII_NO)
cap(CAP_KERNEL_INFO,         PII_MAYBE,                 max_size=80*KB,
    max_time=5)
cap(CAP_NETWORK_CONFIG,      PII_IF_CUSTOMIZED,
                                        min_size=0,     max_size=10*KB)
cap(CAP_NETWORK_STATUS,      PII_YES,                   max_size=19*KB,
    max_time=5)
cap(CAP_PROCESS_LIST,        PII_YES,                   max_size=10*KB,
    max_time=10, checked=False)
cap(CAP_SYSTEM_LOGS,         PII_MAYBE,                 max_size=50*MB)
cap(CAP_TAPDISK_LOGS,        PII_NO,                    max_size=64*KB)
cap(CAP_X11_LOGS,            PII_NO,                    max_size=100*KB)
cap(CAP_XAPI_SUBPROCESS,     PII_NO,                    max_size=KB,
    max_time=10)
cap(CAP_XENSERVER_CONFIG,    PII_MAYBE,                 max_size=1*KB,
    max_time=5)
cap(CAP_XENSERVER_DOMAINS,   PII_NO,                    max_size=1*KB,
    max_time=5)
cap(CAP_XENSERVER_DATABASES, PII_YES,   min_size=500*KB,max_size=2*MB,
    max_time=20, mime=MIME_DATA)
cap(CAP_XENSERVER_INSTALL,   PII_MAYBE, min_size=10*KB, max_size=50*KB)
cap(CAP_XENSERVER_LOGS,      PII_MAYBE, min_size=0,     max_size=50*MB)
cap(CAP_XEN_INFO,            PII_MAYBE,                 max_size=5*KB,
    max_time=10)
cap(CAP_YUM,                 PII_IF_CUSTOMIZED,         max_size=5*KB,
    max_time=30)

ANSWER_YES_TO_ALL = False
SILENT_MODE = False
entries = None
data = {}
dev_null = open('/dev/null', 'r+')

def output(x):
    global SILENT_MODE
    if not SILENT_MODE:
        print x

def output_ts(x):
    output("[%s]  %s" % (time.strftime("%x %X %Z"), x))

def cmd_output(cap, args, label = None):
    if cap in entries:
        a = [aa for aa in args]
        a[0] = os.path.basename(a[0])
        if not label:
            label = ' '.join(a)
        data[label] = {'cap': cap, 'cmd_args': args}

def file_output(cap, path_list):
    if cap in entries:
        for p in path_list:
            if os.path.exists(p):
                data[p] = {'cap': cap, 'filename': p}

def tree_output(cap, path, pattern = None, negate = False):
    if cap in entries:
        if os.path.exists(path):
            for f in os.listdir(path):
                fn = os.path.join(path, f)
                if os.path.isfile(fn) and matches(fn, pattern, negate):
                    file_output(cap, [fn])
                elif os.path.isdir(fn):
                    tree_output(cap, fn, pattern, negate)

def func_output(cap, label, func):
    if cap in entries:
        t = str(func).split()
        data[label] = {'cap': cap, 'func': func}

def collect_data():
    process_lists = {}

    for v in data.values():
        if v.has_key('cmd_args'):
            v['output'] = StringIO.StringIO()
            if not process_lists.has_key(v['cap']):
                process_lists[v['cap']] = []
            process_lists[v['cap']].append(ProcOutput(v['cmd_args'], caps[v['cap']][MAX_TIME], v['output']))
        elif v.has_key('filename') and v['filename'].startswith('/proc/'):
            # proc files must be read into memory
            try:
                f = open(v['filename'], 'r')
                v['output'] = StringIO.StringIO(f.read())
                f.close()
            except:
                pass
        elif v.has_key('func'):
            try:
                s = v['func']()
            except Exception, e:
                s = str(e)
            v['output'] = StringIO.StringIO(s)

    run_procs(process_lists.values())

    # filter passwords out of XAPI database
    if data.has_key('xapi-db.xml') and data['xapi-db.xml'].has_key('output'):
        ih = data['xapi-db.xml']['output']
        ih.seek(0)
        oh = StringIO.StringIO()
        remain = ''
        rec = ih.read(2048)
        while True:
            p = rec.find('>')
            if p != -1:
                remain = rec[p+1:]
                oh.write(re.sub(r'(password_transformed&quot; &quot;)[^ ]+(&quot;)', r'\1REMOVED\2', rec[:p+1]))
            else:
                remain = rec
            new_data = ih.read(2048)
            if new_data == '':
                break
            rec = remain + new_data
        oh.write(remain)
        data['xapi-db.xml']['output'] = oh


def main(argv = None):
    global ANSWER_YES_TO_ALL, SILENT_MODE
    global entries, data

    # we need access to privileged files, exit if we are not running as root
    if os.getuid() != 0:
        print >>sys.stderr, "Error: xen-bugtool must be run as root"
        return 1

    output_type = 'tar.bz2'
    output_fd = -1
    
    if argv is None:
        argv = sys.argv

    try:
        (options, params) = getopt.gnu_getopt(
            argv, 'sy', ['capabilities', 'silent', 'yestoall', 'entries=',
                         'output=', 'outfd='])
    except getopt.GetoptError, opterr:
        print >>sys.stderr, opterr
        return 2

    inventory = readKeyValueFile('/etc/xensource-inventory')
    if inventory.has_key('OEM_BUILD_NUMBER'):
        cap(CAP_OEM,                 PII_MAYBE,                 max_size=5*MB)

    if  os.getenv('XEN_RT'):
        entries = [CAP_BOOT_LOADER, CAP_DISK_INFO, CAP_FIRSTBOOT, CAP_HARDWARE_INFO, 
                   CAP_HOST_CRASHDUMP_DUMPS, CAP_HOST_CRASHDUMP_LOGS, CAP_KERNEL_INFO, 
                   CAP_NETWORK_CONFIG, CAP_NETWORK_STATUS, CAP_PROCESS_LIST, 
                   CAP_SYSTEM_LOGS, CAP_TAPDISK_LOGS, CAP_X11_LOGS, CAP_XAPI_SUBPROCESS, 
                   CAP_XENSERVER_CONFIG, CAP_XENSERVER_DOMAINS, CAP_XENSERVER_DATABASES, 
                   CAP_XENSERVER_INSTALL, CAP_XENSERVER_LOGS, CAP_XEN_INFO, CAP_YUM]
    else:
        entries = caps.keys()

    for (k, v) in options:
        if k == '--capabilities':
            update_capabilities()
            print_capabilities()
            return 0

        if k == '--output':
            if  v in ['tar', 'tar.bz2', 'zip']:
                output_type = v
            else:
                print >>sys.stderr, "Invalid output format '%s'" % v
                return 2

        # "-s" or "--silent" means suppress output (except for the final
        # output filename at the end)
        if k in ['-s', '--silent']:
            SILENT_MODE = True

        if k == '--entries' and v != '':
            entries = v.split(',')

        # If the user runs the script with "-y" or "--yestoall" we don't ask
        # all the really annoying questions.
        if k in ['-y', '--yestoall']:
            ANSWER_YES_TO_ALL = True

        if k == '--outfd':
            output_fd = int(v)
            try:
                os.fstat(output_fd)
            except:
                print >>sys.stderr, "Invalid output file descriptor", output_fd
                return 2

    if len(params) != 1:
        print >>sys.stderr, "Invalid additional arguments", str(params)
        return 2

    if output_fd != -1 and output_type != 'tar':
        print >>sys.stderr, "Option '--outfd' only valid with '--output=tar'"
        return 2

    if ANSWER_YES_TO_ALL:
        output("Warning: '--yestoall' argument provided, will not prompt for individual files.")

    output('''
This application will collate the Xen dmesg output, details of the
hardware configuration of your machine, information about the build of
Xen that you are using, plus, if you allow it, various logs.

The collated information will be saved as a .%s for archiving or
sending to a Technical Support Representative.

The logs may contain private information, and if you are at all
worried about that, you should exit now, or you should explicitly
exclude those logs from the archive.

''' % output_type)

    # assemble potential data
    file_output(CAP_BOOT_LOADER, [GRUB_CONFIG])
    cmd_output(CAP_BOOT_LOADER, [LS, '-lR', '/boot'])
    cmd_output(CAP_BOOT_LOADER, [MD5SUM, BOOT_KERNEL, BOOT_INITRD], label='vmlinuz-initrd.md5sum')

    cmd_output(CAP_DISK_INFO, [FDISK, '-l'])
    file_output(CAP_DISK_INFO, [PROC_PARTITIONS, PROC_MOUNTS])
    file_output(CAP_DISK_INFO, [FSTAB, ISCSI_CONF, ISCSI_INITIATOR])
    cmd_output(CAP_DISK_INFO, [DF, '-alT'])
    cmd_output(CAP_DISK_INFO, [DF, '-alTi'])
    for d in disk_list():
        cmd_output(CAP_DISK_INFO, [HDPARM, '-I', '/dev/%s' % d])
    if len(pidof('iscsid')) != 0:
        cmd_output(CAP_DISK_INFO, [ISCSIADM, '-m', 'node'])
    cmd_output(CAP_DISK_INFO, [VGSCAN])
    cmd_output(CAP_DISK_INFO, [PVS])
    cmd_output(CAP_DISK_INFO, [VGS])
    cmd_output(CAP_DISK_INFO, [LVS])
    file_output(CAP_DISK_INFO, [LVM_CACHE])

    tree_output(CAP_FIRSTBOOT, FIRSTBOOT_DIR)

    file_output(CAP_HARDWARE_INFO, [PROC_CPUINFO, PROC_MEMINFO, PROC_IOPORTS, PROC_INTERRUPTS])
    cmd_output(CAP_HARDWARE_INFO, [DMIDECODE])
    cmd_output(CAP_HARDWARE_INFO, [LSPCI, '-n'])
    cmd_output(CAP_HARDWARE_INFO, [LSPCI, '-vv'])
    file_output(CAP_HARDWARE_INFO, [PROC_USB_DEV, PROC_SCSI])
    # FIXME IDE?

    for d in disk_list():
        cmd_output(CAP_HDPARM_T, [HDPARM, '-tT', '/dev/%s' % d])

    tree_output(CAP_HOST_CRASHDUMP_DUMPS, HOST_CRASHDUMPS_DIR,
                HOST_CRASHDUMP_LOGS_RE, True)
    tree_output(CAP_HOST_CRASHDUMP_LOGS, HOST_CRASHDUMPS_DIR,
                HOST_CRASHDUMP_LOGS_RE, False)

    file_output(CAP_KERNEL_INFO, [PROC_VERSION, PROC_MODULES, PROC_DEVICES, 
                                  PROC_FILESYSTEMS, PROC_CMDLINE])
    cmd_output(CAP_KERNEL_INFO, [ZCAT, PROC_CONFIG], label='config')
    cmd_output(CAP_KERNEL_INFO, [SYSCTL, '-A'])

    tree_output(CAP_NETWORK_CONFIG, SYSCONFIG_NETWORK_SCRIPTS, IFCFG_RE)
    file_output(CAP_NETWORK_CONFIG, [SYSCONFIG_NETWORK, RESOLV_CONF, NSSWITCH_CONF])
    file_output(CAP_NETWORK_CONFIG, [NTP_CONF, IPTABLES_CONFIG, HOSTS_ALLOW, HOSTS_DENY])

    cmd_output(CAP_NETWORK_STATUS, [IFCONFIG, '-a'])
    cmd_output(CAP_NETWORK_STATUS, [ROUTE, '-n'])
    cmd_output(CAP_NETWORK_STATUS, [ARP, '-n'])
    cmd_output(CAP_NETWORK_STATUS, [NETSTAT, '-an'])
    tree_output(CAP_NETWORK_STATUS, DHCP_LEASE_DIR)
    cmd_output(CAP_NETWORK_STATUS, [IPTABLES, '-nL'])
    cmd_output(CAP_NETWORK_STATUS, [BRCTL, 'show'])
    for p in os.listdir('/sys/class/net/'):
        if os.path.isdir('/sys/class/net/%s/bridge' % p):
            cmd_output(CAP_NETWORK_STATUS, [BRCTL, 'showmacs', p])
        else:
            try:
                f = open('/sys/class/net/%s/type' % p, 'r')
                t = f.readline()
                f.close()
                if int(t) == 1:
                    # ARPHRD_ETHER
                    cmd_output(CAP_NETWORK_STATUS, [ETHTOOL, '-S', p])
                    cmd_output(CAP_NETWORK_STATUS, [ETHTOOL, '-k', p])
                    cmd_output(CAP_NETWORK_STATUS, [ETHTOOL, '-i', p])
                    cmd_output(CAP_NETWORK_STATUS, [ETHTOOL, '-c', p])
            except:
                pass

    tree_output(CAP_OEM, DELL_OMSA_LOGS)

    cmd_output(CAP_PROCESS_LIST, [PS, 'wwwaxf', '-eo', 'pid,tty,stat,time,nice,psr,pcpu,pmem,wchan:25,args'], label='process-tree')

    file_output(CAP_SYSTEM_LOGS,
         [ VAR_LOG_DIR + x for x in
           [ 'syslog', 'messages', 'secure', 'debug', 'dmesg', 'boot.msg' ] +
           [ 'messages.%d' % y for y in range(1,20)] +
           [ 'messages.%d.gz' % y for y in range(1,20)] +
           [ 'secure.%d' % y for y in range(1,20)] +
           [ 'secure.%d.gz' % y for y in range(1,20)]])
    if not os.path.exists('/var/log/dmesg') and not os.path.exists('/var/log/boot.msg'):
        cmd_output(CAP_SYSTEM_LOGS, [DMESG])

    if CAP_TAPDISK_LOGS in entries:
        generate_tapdisk_logs()

    tree_output(CAP_X11_LOGS, X11_LOGS_DIR, X11_LOGS_RE)

    func_output(CAP_XAPI_SUBPROCESS, 'xapi_subprocesses', dump_xapi_subprocess_info)

    file_output(CAP_XENSERVER_CONFIG, [POOL_CONF, XAPI_CONF, XAPI_SSL_CONF, XENSOURCE_INVENTORY, VENDORKERNEL_INVENTORY])
    cmd_output(CAP_XENSERVER_CONFIG, [LS, '-lR', '/opt/xensource'])

    cmd_output(CAP_XENSERVER_DATABASES, [XAPI_DB_PROCESS, '-xmltostdout'], label='xapi-db.xml')
    cmd_output(CAP_XENSERVER_DATABASES, [XENSTORE_LS])

    cmd_output(CAP_XENSERVER_DOMAINS, [LIST_DOMAINS])

    file_output(CAP_XENSERVER_INSTALL,
                [ VAR_LOG_DIR + x for x in 
                  [ 'firstboot-SR-commands-log',
                    'upgrade-commands-log', 'generate-iscsi-iqn-log']] +
                [ '/root/' + x for x in 
                  [ 'blockdevs-log', 'cmdline-log', 'devcontents-log',
                    'dmesg-log', 'install-log', 'lspci-log', 'modules-log',
                    'pci-log', 'processes-log', 'tty-log', 'uname-log',
                    'vgscan-log']])

    file_output(CAP_XENSERVER_LOGS, XENSERVER_LOGS)

    try:
        xc = xen.lowlevel.xc.xc()

        func_output(CAP_XEN_INFO, 'xen-dmesg', xc.readconsolering)
        func_output(CAP_XEN_INFO, 'physinfo', lambda: prettyDict(xc.physinfo()))
        func_output(CAP_XEN_INFO, 'xeninfo', lambda: prettyDict(xc.xeninfo()))
    except:
        pass
    file_output(CAP_XEN_INFO, [PROC_XEN_BALLOON])

    file_output(CAP_YUM, [YUM_LOG])
    tree_output(CAP_YUM, YUM_REPOS_DIR)
    cmd_output(CAP_YUM, [RPM, '-qa'])
    
    # permit the user to filter out data
    for k in sorted(data.keys()):
        if not ANSWER_YES_TO_ALL and not yes("Include '%s'? [Y/n]: " % k):
            del data[k]

    # collect selected data now
    output_ts('Running commands to collect data')
    collect_data()

    # create archive
    if not os.path.exists(BUG_DIR):
        os.makedirs(BUG_DIR)

    if output_type.startswith('tar'):
        make_tar(output_type, output_fd)
    else:
        make_zip()

    clean_tapdisk_logs()
    return 0
    
def generate_tapdisk_logs():
    for pid in pidof('tapdisk'):
	try:
	    os.kill(pid, SIGUSR1)
            output_ts("Including logs for tapdisk process %d" % pid)
        except :
            pass
    # give processes a second to write their logs
    time.sleep(1)
    file_output(CAP_TAPDISK_LOGS, ['/tmp/tapdisk.log.%d' % pid for pid in pidof('tapdisk')])

def clean_tapdisk_logs():
    for filename in [f for f in os.listdir('/tmp') if f.startswith('tapdisk.log.')]:
        try:
            os.remove(os.path.join('tmp', filename))
        except :
            pass

def dump_xapi_subprocess_info():
    """Check which fds are open by xapi and its subprocesses to diagnose faults like CA-10543.
       Returns a string containing a pretty-printed pstree-like structure. """
    pids = filter(lambda x: os.path.exists("/proc/" + x + "/cmdline"), os.listdir("/proc"))
    def readlines(filename):
    	f = open(filename, "r")
	try:
		return f.readlines()
	finally:
		f.close()
    def cmdline(pid):
    	all = readlines("/proc/" + pid + "/cmdline")
	if all == []:
	   return ""
	else:
	   return all[0]
    def parent(pid):
    	for i in readlines("/proc/" + pid + "/status"):
	    if i.startswith("PPid:"):
	       return i.split()[-1]
	return None
    def pstree(pid):
    	result = { "cmdline": cmdline(pid) }
	child_pids = filter(lambda x:parent(x) == pid, pids)
	children = { }
	for child in child_pids:
	    children[child] = pstree(child)
	result['children'] = children
	fds = { }
	for fd in os.listdir("/proc/" + pid + "/fd"):
	    fds[fd] = os.readlink("/proc/" + pid + "/fd/" + fd)
	result['fds'] = fds
	return result	
    xapis = filter(lambda x: cmdline(x).startswith("/opt/xensource/bin/xapi"), pids)
    xapis = filter(lambda x: parent(x) == "1", xapis)
    result = {}
    for xapi in xapis:
    	result[xapi] = pstree(xapi)
    pp = pprint.PrettyPrinter(indent=4)
    return pp.pformat(result)


def make_tar(suffix, output_fd):
    global SILENT_MODE, data

    mode = 'w'
    if suffix == 'tar.bz2':
        mode = 'w:bz2'
    date_string = time.strftime("%Y%m%d%H%M%S")

    filename = "%s/bug-report-%s.%s" % (BUG_DIR, date_string, suffix)
    subdir = "bug-report-%s" % date_string

    now = time.time()

    # include inventory
    data['inventory.xml'] = {'cap': None, 'output': StringIO.StringIO(make_inventory(data, subdir))}

    if output_fd == -1:
        tf = tarfile.open(filename, mode)
    else:
        tf = tarfile.open(None, 'w', os.fdopen(output_fd, 'a'))

    try:
        for (k, v) in data.items():
            tar_filename = os.path.join(subdir, construct_filename(k, v))
            ti = tarfile.TarInfo(tar_filename)

            ti.mtime = now
            ti.uname = 'root'
            ti.gname = 'root'

            if v.has_key('output'):
                ti.size = len(v['output'].getvalue())
                v['output'].seek(0)
                tf.addfile(ti, v['output'])
            elif v.has_key('filename'):
                ti.size = os.stat(v['filename']).st_size
                tf.addfile(ti, file(v['filename']))
    finally:
        tf.close()

    if output_fd == -1:
        output ('Writing tarball %s successful.' % filename)
        if SILENT_MODE:
            print filename


def make_zip():
    global SILENT_MODE, data

    date_string = time.strftime("%Y%m%d%H%M%S")

    filename = "%s/bug-report-%s.zip" % (BUG_DIR, date_string)
    subdir = "bug-report-%s" % date_string

    # include inventory
    data['inventory.xml'] = {'cap': None, 'output': StringIO.StringIO(make_inventory(data, subdir))}

    zf = zipfile.ZipFile(filename, 'w', zipfile.ZIP_DEFLATED)

    try:
        for (k, v) in data.items():
            dest = os.path.join(subdir, construct_filename(k, v))

            if v.has_key('output'):
                zf.writestr(dest, v['output'].getvalue())
            else:
                if os.stat(v['filename']).st_size < 50:
                    compress_type = zipfile.ZIP_STORED
                else:
                    compress_type = zipfile.ZIP_DEFLATED
                zf.write(v['filename'], dest, compress_type)
    finally:
        zf.close()
    
    output ('Writing archive %s successful.' % filename)
    if SILENT_MODE:
        print filename


def make_inventory(inventory, subdir):
    document = getDOMImplementation().createDocument(
        None, INVENTORY_XML_ROOT, None)

    # create summary entry
    s = document.createElement(INVENTORY_XML_SUMMARY)
    user = os.getenv('SUDO_USER', os.getenv('USER'))
    if user:
        s.setAttribute('user', user)
    s.setAttribute('date', time.strftime('%c'))
    s.setAttribute('hostname', platform.node())
    s.setAttribute('uname', ' '.join(platform.uname()))
    s.setAttribute('uptime', commands.getoutput(UPTIME))
    document.getElementsByTagName(INVENTORY_XML_ROOT)[0].appendChild(s)

    map(lambda (k, v): inventory_entry(document, subdir, k, v),
        inventory.items())
    return document.toprettyxml()

def inventory_entry(document, subdir, k, v):
    el = document.createElement(INVENTORY_XML_ELEMENT)
    el.setAttribute('capability', v['cap'])
    el.setAttribute('filename', os.path.join(subdir, construct_filename(k, v)))
    el.setAttribute('md5sum', md5sum(v))
    document.getElementsByTagName(INVENTORY_XML_ROOT)[0].appendChild(el)


def md5sum(d):
    m = md5.new()
    if d.has_key('filename'):
        f = open(d['filename'])
        data = f.read(1024)
        while len(data) > 0:
            m.update(data)
            data = f.read(1024)
        f.close()
    elif d.has_key('output'):
        m.update(d['output'].getvalue())
    return m.hexdigest()


def construct_filename(k, v):
    if v.has_key('filename'):
        if v['filename'][0] == '/':
            return v['filename'][1:]
        else:
            return v['filename']
    s = k.replace(' ', '-')
    s = s.replace('--', '-')
    s = s.replace('/', '%')
    if s.find('.') == -1:
        s += '.out'

    return s


def update_capabilities():
    update_cap_size(CAP_HOST_CRASHDUMP_LOGS,
                    size_of_dir(HOST_CRASHDUMPS_DIR, HOST_CRASHDUMP_LOGS_RE))
    update_cap_size(CAP_HOST_CRASHDUMP_DUMPS,
                    size_of_dir(HOST_CRASHDUMPS_DIR, HOST_CRASHDUMP_LOGS_RE,
                                True))
    update_cap_size(CAP_XENSERVER_LOGS, size_of_all(XENSERVER_LOGS))


def update_cap_size(cap, size):
    update_cap(cap, MIN_SIZE, size)
    update_cap(cap, MAX_SIZE, size)
    update_cap(cap, CHECKED, size > 0)


def update_cap(cap, k, v):
    global caps
    l = list(caps[cap])
    l[k] = v
    caps[cap] = tuple(l)


def size_of_dir(d, pattern = None, negate = False):
    if os.path.isdir(d):
        return size_of_all([os.path.join(d, fn) for fn in os.listdir(d)],
                           pattern, negate)
    else:
        return 0


def size_of_all(files, pattern = None, negate = False):
    return sum([size_of(f, pattern, negate) for f in files])


def matches(f, pattern, negate):
    if negate:
        return not matches(f, pattern, False)
    else:
        return pattern is None or pattern.match(f)


def size_of(f, pattern, negate):
    if os.path.isfile(f) and matches(f, pattern, negate):
        return os.stat(f)[6]
    else:
        return size_of_dir(f, pattern, negate)


def print_capabilities():
    document = getDOMImplementation().createDocument(
        "ns", CAP_XML_ROOT, None)
    map(lambda key: capability(document, key), caps.keys())
    print document.toprettyxml()

def capability(document, key):
    c = caps[key]
    el = document.createElement(CAP_XML_ELEMENT)
    el.setAttribute('key', c[KEY])
    el.setAttribute('pii', c[PII])
    el.setAttribute('min-size', str(c[MIN_SIZE]))
    el.setAttribute('max-size', str(c[MAX_SIZE]))
    el.setAttribute('min-time', str(c[MIN_TIME]))
    el.setAttribute('max-time', str(c[MAX_TIME]))
    el.setAttribute('content-type', c[MIME])
    el.setAttribute('default-checked', c[CHECKED] and 'yes' or 'no')
    document.getElementsByTagName(CAP_XML_ROOT)[0].appendChild(el)


def prettyDict(d):
    format = '%%-%ds: %%s' % max(map(len, [k for k, _ in d.items()]))
    return '\n'.join([format % i for i in d.items()]) + '\n'


def yes(prompt):
    yn = raw_input(prompt)

    return len(yn) == 0 or yn.lower()[0] == 'y'


partition_re = re.compile(r'.*[0-9]+$')

def disk_list():
    disks = []
    try:
        f = open('/proc/partitions')
        f.readline()
        f.readline()
        for line in f.readlines():
            (major, minor, blocks, name) = line.split()
            if int(major) < 254 and not partition_re.match(name):
                disks.append(name)
        f.close()
    except:
        pass
    return disks


class ProcOutput:
    def __init__(self, command, max_time, inst=None):
        self.command = command
        self.max_time = max_time
        self.inst = inst
        self.running = False
        self.status = None
        self.timed_out = False
        self.failed = False
        self.timeout = int(time.time()) + self.max_time

    def __del__(self):
        self.terminate()

    def run(self):
        self.timed_out = False
        try:
            self.proc = Popen(self.command, bufsize=1, stdin=dev_null, stdout=PIPE, stderr=dev_null)
            old = fcntl.fcntl(self.proc.stdout.fileno(), fcntl.F_GETFD)
            fcntl.fcntl(self.proc.stdout.fileno(), fcntl.F_SETFD, old | fcntl.FD_CLOEXEC)
            self.running = True
            self.failed = False
        except:
            output_ts("'%s' failed" % ' '.join(self.command))
            self.running = False
            self.failed = True

    def terminate(self):
        if self.running:
            try:
                os.kill(self.proc.pid, SIGTERM)
            except:
                pass
            self.proc = None
            self.running = False
            self.status = SIGTERM

    def read_line(self):
        assert self.running
        line = self.proc.stdout.readline()
        if line == '':
            # process exited
            self.status = self.proc.wait()
            self.proc = None
            self.running = False
        elif self.inst:
            self.inst.write(line)

def run_procs(procs):
    while True:
        pipes = []
        active_procs = []

        for pp in procs:
            for p in pp:
                if p.running:
                    active_procs.append(p)
                    pipes.append(p.proc.stdout)
                    break
                elif p.status == None and not p.failed and not p.timed_out:
                    p.run()
                    active_procs.append(p)
                    pipes.append(p.proc.stdout)
                    break

        if len(pipes) == 0:
            # all finished
            break

        (i, o, x) = select(pipes, [], [], 1.0)
        now = int(time.time())

        # handle process output
        for p in active_procs:
            if p.proc.stdout in i:
                p.read_line()

            # handle timeout
            if p.running and now > p.timeout:
                output_ts("'%s' timed out" % ' '.join(p.command))
                if p.inst:
                    p.inst.write("\n** timeout **\n")
                p.timed_out = True
                p.terminate()


def pidof(name):
    pids = []

    for d in [p for p in os.listdir('/proc') if p.isdigit()]:
        try:
            if os.path.basename(os.readlink('/proc/%s/exe' % d)) == name:
                pids.append(int(d))
        except:
            pass
        
    return pids


def readKeyValueFile(filename, allowed_keys = None, strip_quotes = True, assert_quotes = True):
    """ Reads a KEY=Value style file (e.g. xensource-inventory). Returns a 
    dictionary of key/values in the file.  Not designed for use with large files
    as the file is read entirely into memory."""

    f = open(filename, "r")
    lines = [x.strip("\n") for x in f.readlines()]
    f.close()

    # remove lines contain
    if allowed_keys:
        lines = filter(lambda x: True in [x.startswith(y) for y in allowed_keys],
                       lines)
    
    defs = [ (l[:l.find("=")], l[(l.find("=") + 1):]) for l in lines ]

    if strip_quotes:
        def quotestrip(x):
            if assert_quotes:
                assert x.startswith("'") and x.endswith("'")
            return x.strip("'")
        defs = [ (a, quotestrip(b)) for (a,b) in defs ]

    return dict(defs)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print "\nInterrupted."
        sys.exit(3)
